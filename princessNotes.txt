Create new AeroPathFinder
	This will govern the behavior of aero units on space maps
		Contains AeroSpaceAdjacencyMap class
		getAdjacent can generate the following steps:
			ACC (thrust used < unit "run" speed and no steps other than ACC in path)
			DEC (if velocity > 0 and thrust used < unit "run" speed and no steps other than DEC in path)
			LEFT/RIGHT (if "due free turn" and thrust used <= unit "run" speed - cost of turn)
			FWD (if velocity left > 0)
			ROLL (if thrust used < unit "run" speed)
			Can use original "Velocity cost comparator" (probably)?
			

Classes to help govern the behavior of aerodyne units:
		

		Contains AerodyneGroundAdjacencyMap class
		getAdjacent can generate the following steps:
			ACC (if velocity < 12 and thrust used < unit "run" speed and no steps other than ACC in path)
			DEC (if velocity > 0 and thrust used < unit "run" speed and no steps other than DEC in path)
			Manuever (if enough velocity to employ manuever and enough thrust left)
			LEFT/RIGHT (if "due free turn")
			FWD until "due free turn" or remaining velocity used
			Need to use new cost comparator and "graph node" as well
		"graph node" is "coords with facing and remaining velocity". Just "coords with facing" is insufficient 
			to describe aero movement, as left-forward-right-forward-right-forward-left is not the same as right-forward-left-forward-left-forward-right with extra velocity left over.
		"comparator" is as follows:
			prefer flying over enemies to not flying over enemies
			prefer not using manuevers to using manuevers
			prefer shortest path 'off board' to longer paths
			

Aerodyne:
ACC (0 or more, 1 or more if starting at velocity 0 (todo: on ground maps only))
DEC (0 or more, don't bother if velocity is at 16 or less (todo: on ground maps only))
Can turn once at final step
Turn left or right if "turn due"
Forward

Spheroid
No acc at all
Can turn any number of times at final step
No point to turning more than once until final step
Pretty god damned manueverable if you ask me


TODO:
DONE, partially: Get Aero to change altitude (AFTER all possible horizontal paths have been generated)
	For each horizontal path
		calculate distance to altitude 5 (future: 1 for bombers with bombs, 3, and 7 if aircraft on map)
		add # of UPs or DOWNs to get you towards that target altitude, but no more than 1 "down" and not enough "up" 			to break safe thrust
DONE, maybe?: Get Aero to change altitude after all accelerations have been assigned
DONE: Get Aero to drop repeated "off board" paths, just keep the shortest one (via filter possibly?)
DONE: Get Aero to drop paths that will not result in attacks given aero's current stats 
	(no bombs = altitude needs to be > 1, basically)

ground to air fire: 
	range to target = target ending space, unless target attacked me, then it's 0. No min range.
		+2 to range for each altitude hex (so no reason to go past 7)

Aero firing plan should come in under heat more efficiently
getMovePathSuccessProbability is calculated twice in PathRanker (once in ValidatePaths, once in rankPath)
DONE implement logic for "crippled" aeros to flee instead of returning (AeroGroundPathFinder.AddStep(MovePath)).
implement logic to add 'Evasion' mode to paths that remain on the board but do not make any attacks (possibly in 	BasicPathRanker after evaluateMovedEnemy())
DONE implement "hex visitation" logic - mark hexes as visited while generating path, if it does not go off board. If a path winds 	up such that all hexes have already been visited, then discard.
implement logic to "respect edges", so that an aero whose path will take it off the edge will attempt to make a turn instead