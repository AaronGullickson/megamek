/*
 * MegaMek - Copyright (C) 2005 Ben Mazur (bmazur@sev.org)
 *
 *  This program is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by the Free
 *  Software Foundation; either version 2 of the License, or (at your option)
 *  any later version.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *  or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 *  for more details.
 */
package megamek.client.ratgenerator;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;

import megamek.common.MechSummary;
import megamek.common.MechSummaryCache;

/**
 * Manages random assignment table generated by RATGenerator.
 * 
 * @author Neoancient
 *
 */
public class UnitTable {
	private ArrayList<TableEntry> table = new ArrayList<TableEntry>();
	private FactionRecord faction;
	private String unitType;
	private int year;
	private int rating;
	private Collection<Integer> weightClasses;
	private Collection<MissionRole> roles;
	private int roleStrictness;
	
	public UnitTable(FactionRecord faction, String unitType, int year,
			int rating, Collection<Integer> weightClasses,
			Collection<MissionRole> roles, int roleStrictness) {
		this.faction = faction;
		this.unitType = unitType;
		this.year = year;
		this.rating = rating;
		this.weightClasses = weightClasses;
		this.roles = roles;
		this.roleStrictness = roleStrictness;
		generateTable();
	}
	
	private void generateTable() {
		table = new ArrayList<TableEntry>();
		Map<String,Double> generated = RATGenerator.getInstance().generateTable(faction,
				unitType, year, rating, weightClasses, roles, roleStrictness, faction);
		for (String key : generated.keySet()) {
			int weight = (int)(generated.get(key) + 0.5);
			if (weight > 0) {
				try {
					TableEntry entry = new TableEntry(weight, key);
					table.add(entry);
				} catch (IllegalArgumentException ex) {
					System.err.println(ex.getMessage());
				}
			}
		}
	}
	
	public int getNumEntries() {
		return table.size();
	}
	
	public int getEntryWeight(int index) {
		return table.get(index).weight;
	}
	
	public String getEntryText(int index) {
		if (table.get(index).isUnit()) {
			return table.get(index).getUnitEntry().getName();
		} else {
			if (faction.isClan()) {
				return "Isorla: " + table.get(index).getSalvageFaction().getName(year);
			} else {
				return "Salvage: " + table.get(index).getSalvageFaction().getName(year);
			}
		}
	}
	
	public int getBV(int index) {
		if (table.get(index).isUnit()) {
			return table.get(index).getUnitEntry().getBV();
		} else {
			return 0;
		}
	}
	
	public ArrayList<MechSummary> generateUnits(int num) {
		ArrayList<MechSummary> retVal = new ArrayList<MechSummary>();
		//TODO: generate units
		return retVal;
	}
	
	public class TableEntry {
		int weight;
		Object entry;
		
		public TableEntry(int weight, String entryName) {
			this.weight = weight;
			if (entryName.startsWith("@")) {
				entry = RATGenerator.getInstance().getFaction(entryName.replace("@", ""));
			} else {
				entry = MechSummaryCache.getInstance().getMech(entryName);
			}
			if (entry == null) {
				throw new IllegalArgumentException("RATGenerator could not parse entry " + entryName);
			}
		}
		
		public MechSummary getUnitEntry() {
			return (MechSummary)entry;
		}
		
		public FactionRecord getSalvageFaction() {
			return (FactionRecord)entry;
		}
		
		public boolean isUnit() {
			return entry instanceof MechSummary;
		}
	}
}
