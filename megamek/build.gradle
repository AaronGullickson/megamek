plugins {
	id 'application'
	id 'maven-publish'
	id 'edu.sc.seis.launch4j' version '2.4.4'
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['i18n', 'resources']
        }
    }
    test {
        java {
            srcDirs = ['unittests']
        }
        resources {
            srcDirs = ['testresources']
        }
    }
}

dependencies {
	implementation 'com.thoughtworks.xstream:xstream:1.4.10'
	implementation 'log4j:log4j:1.2.17'

	implementation 'javax.xml.bind:jaxb-api:2.3.0'
	runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:2.3.0'
	runtimeOnly 'org.glassfish.jaxb:jaxb-core:2.3.0'
	runtimeOnly 'com.sun.activation:javax.activation:1.2.0'

    testImplementation 'junit:junit:4.12' 
	testImplementation 'org.mockito:mockito-core:2.20.1'
}

mainClassName = 'megamek.MegaMek'

ext {
	jvmOptions = ['-Xmx1024m']
	dataDir = "data"
	confDir = "mmconf"
	logDir = "logs"
	docDir = "docs"
	libDir = "lib"
	distributionDir = "${buildDir}/distributions"
	fileStagingDir = "${buildDir}/files"
	repoDir = "${buildDir}/repo"
	atlasedImages = "${fileStagingDir}/atlasedImages.txt"
	unitFilesDir = "${dataDir}/mechfiles"
	ratDir = "${dataDir}/rat"
	scriptTemplate = "startScriptTemplate.txt"
}

jar {
	archiveName = "${rootProject.name}.${extension}"
	manifest {
	    attributes "Main-Class": mainClassName
	    attributes 'Class-Path' : project.sourceSets.main.runtimeClasspath.files
	    	.findAll { it.name.endsWith(".jar") }.collect { "${libDir}/${it.name}" }.join(' ')
	}
}

task officialUnitList(type: JavaExec, dependsOn: jar) {
	description = 'Compiles a list of all units that come from official sources and saves it in the docs folder.'
	group = 'build'
	classpath = sourceSets.main.runtimeClasspath
	main = 'megamek.MegaMek'
	args '-oul'
}

task equipmentList(type: JavaExec, dependsOn: jar) {
	description = 'Generate current equipment.txt'
	group = 'build'
	classpath = sourceSets.main.runtimeClasspath
	main = 'megamek.MegaMek'
	args = [ '-eqdb', 'docs/equipment.txt' ]
}

task copyFiles(type: Copy) {
	description = 'Stages files that are to be copied into the distribution.'
	
	dependsOn officialUnitList
	dependsOn equipmentList
	
	from projectDir
	
	include "${dataDir}/**"
	include "${confDir}/**"
	include "${docDir}/**"
	exclude "**/*.psd"
	// No need to copy the files that are going to be zipped
	exclude { it.file.isDirectory() && (it.file in file(unitFilesDir).listFiles()) }
	exclude "${ratDir}/**"
	
	into fileStagingDir
}

task createImageAtlases(type: JavaExec, dependsOn: copyFiles) {
	description = 'Combines individual image files into a set of image atlases.'
	classpath = sourceSets.main.runtimeClasspath
	main = "megamek.utils.CreateImageAtlases"
	workingDir = file(fileStagingDir)
}

task deleteAtlasedImages(dependsOn: createImageAtlases) {
	description = 'Removes images from the staging directory that have been incorporated into atlases.'
	doLast {
		ant.delete dir: fileStagingDir, includesfile: atlasedImages
		ant.delete file: atlasedImages
	}
}

task unitFilesZip (dependsOn: copyFiles) {
	description = 'Creates zip archives of all the unit file folders.'
	file(unitFilesDir).eachDir {subDir ->
		dependsOn tasks.create("${name}${subDir.name}", Zip) {
			from subDir
			archiveName "${subDir.name}.zip"
			destinationDir file("${fileStagingDir}/${unitFilesDir}")
		}
	}
}

task ensureRatDir (dependsOn: copyFiles) {
	doLast {
		mkdir "${fileStagingDir}/${ratDir}"
	}
}

task ratZip (type: Zip, dependsOn: ensureRatDir) {
	description = 'Creates a zip archive of all the random assignment tables.'
	from ratDir
	archiveName "rat_default.zip"
	destinationDir file("${fileStagingDir}/${ratDir}")
}

task createLogDir (dependsOn: copyFiles) {
	description 'Creates the log directory and the timestamp file.'
	doLast {
		mkdir "${fileStagingDir}/${logDir}"
		ant.touch(file: "${fileStagingDir}/${logDir}/timestamp")
	}
}

task stageFiles {
	description = 'Process data files to be included in distribution'
	group = 'distribution'
	dependsOn unitFilesZip
	dependsOn ratZip
	dependsOn deleteAtlasedImages
	dependsOn createLogDir
}

task unixStartScript (type: CreateStartScripts) {
	description = 'Create shell script for *nix distribution.'
	applicationName = 'startup'
	mainClassName = project.mainClassName
	outputDir = startScripts.outputDir
	classpath = jar.outputs.files + files(project.sourceSets.main.runtimeClasspath.files)
	    	.filter { it.name.endsWith(".jar") }
	defaultJvmOpts = project.ext.jvmOptions
	// The default template assumes the start script is in a subdirectory and always
	// sets APP_HOME to the parent directory of the one containing the script.
	// So we provide a modified template.
	unixStartScriptGenerator.template = resources.text.fromFile(scriptTemplate)
	doLast {
		// The start script assumes all the files on the classpath will be in the lib directory.
		unixScript.text = unixScript.text.replace("lib/${rootProject.name}", rootProject.name)
	}
}

distributions {
	// Creates tasks which package distribution with MM jar and startup script in root directory
	unix {
		baseName = rootProject.name.toLowerCase()
		contents {
			from fileStagingDir
			from(unixStartScript.unixScript)
			from(jar)
			from (project.sourceSets.main.runtimeClasspath.files
    				.findAll { it.name.endsWith(".jar") }) {
    			into "${libDir}"
			}
		}
	}
	// Creates tasks which package distribution with MM jar wrapped in Windows executable
	windows {
		contents {
			from ("${buildDir}/launch4j") {
				include '*.exe'
			}
			contents {
				from fileStagingDir
				from (project.sourceSets.main.runtimeClasspath.files
	    				.findAll { it.name.endsWith(".jar") }) {
	    			into "${libDir}"
				}
			}
		}
	}
}

createExe {
	description = 'Create Windows executable that wraps MM jar'
	mainClassName = project.mainClassName
	icon = "${projectDir}/data/images/misc/megamek.ico"
	jvmOptions = project.ext.jvmOptions
}

windowsDistZip {
	description = 'Creates Windows distribution packaged as a zip archive'
	dependsOn createExe
}

unixDistTar {
	description = 'Creates *nix distribution packaged as a tar ball'
	dependsOn stageFiles
	dependsOn unixStartScript
	compression = Compression.GZIP
}

// The repository can only be cloned into an empty directory so we need to delete anything left over
// from a previous build
task deleteRepoDir (type: Delete) {
	delete = "${repoDir}"
}

task cloneRepo (type: Exec, dependsOn: deleteRepoDir) {
	description = 'Clones the repository to ensure we are working with a clean directory tree'
	group = 'distribution'
	commandLine "git"
	args "clone", "--branch", mmBranch, "--single-branch", gitRoot, "${buildDir}/repo"
}

task sourceZip (type: Zip) {
	description 'Creates a zip archive of the source'
	group = 'distribution'
	from (rootDir) {
		exclude "**/build/**"
		exclude "**/.*"
	}
	archiveName "${rootProject.name.toLowerCase()}-${version}-source.zip"
	destinationDir file(distributionDir)
}

task sourceTar (type: Tar) {
	description 'Creates a compressed tar archive of the source'
	from (rootDir) {
		exclude "**/build/**"
		exclude "**/.*"
	}
	archiveName "${rootProject.name.toLowerCase()}-${version}-source.tar.gz"
	compression = Compression.GZIP
	destinationDir file(distributionDir)
}

// Replace the assembleDist task created by the distributions plugin to create the packages we want to
task assembleDist(overwrite: true) {
	description = 'Build unix, Windows, and source packages'
	group = 'distribution'
	dependsOn unixDistTar
	dependsOn windowsDistZip
	dependsOn sourceZip
	dependsOn sourceTar
}

task buildFromRepo (type: GradleBuild) {
	description = 'Assembles the distribution packages in the clean repository copy'
	group = 'distribution'
	dependsOn cloneRepo
	
	buildFile = "${repoDir}/build.gradle"
	dir = "${repoDir}"
	tasks = [ ':megamek:assembleDist' ]
}

task release (type: Copy) {
	description = 'Builds the release packages from the repository and copies them into the project build directory'
	group = 'distribution'
	dependsOn buildFromRepo
	
	from "${repoDir}/megamek/build/distributions"
	into "${distributionDir}"
}

task sourcesJar(type: Jar) {
	description = 'Creates a source archive for publication to a maven repository'
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar) {
	description = 'Creates a documentation archive for publication to a maven repository'
    from javadoc
    classifier = 'javadoc'
}

publishing {
    publications {
        publishMMLibrary(MavenPublication) {
            artifactId = "megamek${mmBranchTag}"
            from components.java
            artifact sourcesJar
// Javadoc is full of errors
//            artifact javadocJar

            pom {
                name = "MegaMek"
                description = "MegaMek"
                url = "http://megamek.org"
                licenses {
                    license {
                        name = "GNU General Public License, version 2"
                        url = "https://www.gnu.org/licenses/gpl-2.0.html"
                    }
                }
            }
        }
	}
	repositories {
		mavenLocal()
	}
}
