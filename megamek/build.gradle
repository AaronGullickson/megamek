plugins {
	id 'application'
	id 'maven-publish'
	id 'edu.sc.seis.launch4j' version '2.4.4'
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['i18n', 'resources']
        }
    }
    test {
        java {
            srcDirs = ['unittests']
        }
        resources {
            srcDirs = ['i18n', 'resources']
        }
    }
}

dependencies {
	implementation 'com.thoughtworks.xstream:xstream:1.4.10'
	implementation 'log4j:log4j:1.2.17'

	implementation 'javax.xml.bind:jaxb-api:2.3.0'
	runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:2.3.0'
	runtimeOnly 'org.glassfish.jaxb:jaxb-core:2.3.0'
	runtimeOnly 'com.sun.activation:javax.activation:1.2.0'

    testImplementation 'junit:junit:4.12' 
	testImplementation 'org.mockito:mockito-core:2.20.1'
}

mainClassName = 'megamek.MegaMek'

ext {
	gitRoot = 'https://github.com/MegaMek/megamek.git'

	dataDir = "data"
	confDir = "mmconf"
	logDir = "logs"
	docDir = "docs"
	fileStagingDir = "${buildDir}/files"
	atlasedImages = "${fileStagingDir}/atlasedImages.txt"
	unitFilesDir = "${dataDir}/mechfiles"
	ratDir = "${dataDir}/rat"
}

task copyFiles(type: Copy) {
	from projectDir
	
	include "${dataDir}/**"
	include "${confDir}/**"
	include "${docDir}/**"
	exclude "**/*.psd"
	exclude { it.file.isDirectory() && (it.file in file(unitFilesDir).listFiles()) }
	exclude "${ratDir}/**"
	
	into fileStagingDir
}

task createImageAtlases(type: JavaExec, dependsOn: copyFiles) {
	classpath = sourceSets.main.runtimeClasspath
	main = "megamek.utils.CreateImageAtlases"
	workingDir = file(fileStagingDir)
}

task deleteAtlasedImages(dependsOn: createImageAtlases) {
	doLast {
		ant.delete dir: fileStagingDir, includesfile: atlasedImages
		ant.delete file: atlasedImages
	}
}

task unitFilesZip (dependsOn: copyFiles) {
	file(unitFilesDir).eachDir {subDir ->
		dependsOn tasks.create("${name}${subDir.name}", Zip) {
			from subDir
			archiveName "${subDir.name}.zip"
			destinationDir file("${fileStagingDir}/${unitFilesDir}")
		}
	}
}

task ensureRatDir (dependsOn: copyFiles) {
	doLast {
		mkdir "${fileStagingDir}/${ratDir}"
	}
}

task ratZip (type: Zip, dependsOn: ensureRatDir) {
	from ratDir
	archiveName "rat_default.zip"
	destinationDir file("${fileStagingDir}/${ratDir}")
}

task createLogDir (dependsOn: copyFiles) {
	doLast {
		mkdir "${fileStagingDir}/${logDir}"
		ant.touch(file: "${fileStagingDir}/${logDir}/timestamp")
	}
}

task stageFiles {
	dependsOn unitFilesZip
	dependsOn ratZip
	dependsOn deleteAtlasedImages
	dependsOn createLogDir
}

distributions {
	main {
		contents {
			from fileStagingDir
		}
	}
	windows {
		contents {
			from "${buildDir}/launch4j"
			with project.distributions.main.getContents()
		}
	}
}

distZip {
	dependsOn stageFiles
}

distTar {
	dependsOn stageFiles
	compression = Compression.GZIP 	
}

createExe {
	mainClassName = project.mainClassName
	icon = "${projectDir}/data/images/misc/megamek.ico"
}

windowsDistZip {
	dependsOn createExe
}

task cloneRepo (type: Exec) {
	commandLine "git"
	args "clone", "--branch", "gradle", "--single-branch", gitRoot, "repo"
	workingDir buildDir
}

task buildFromRepo (type: Exec) {
	dependsOn cloneRepo
	
	commandLine "${buildDir}/repo/gradlew"
	workingDir "${buildDir}/repo"
	args ":megamek:assembleDist"
}

task release (type: Copy) {
	dependsOn buildFromRepo
	
	from "${buildDir}/repo/${buildDir}/distributions"
	into "${buildDir}/distributions"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

publishing {
    publications {
        publishMMLibrary(MavenPublication) {
            artifactId = 'megamek'
            from components.java
            artifact sourcesJar
// Javadoc is full of errors
//            artifact javadocJar

            pom {
                name = "MegaMek"
                description = "MegaMek library"
                url = "http://megamek.org"
                licenses {
                    license {
                        name = "GNU General Public License, version 2"
                        url = "https://www.gnu.org/licenses/gpl-2.0.html"
                    }
                }
            }
        }
	}
	repositories {
		mavenLocal()
	}
}
